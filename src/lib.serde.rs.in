extern crate serde;
extern crate serde_json;

#[doc(hidden)]
mod json {
    use serde_json::Value;

    // TODO: Needs to return `Result`
    pub fn json_val<T: ?Sized + Serialize>(val: &T) -> Value {
        ::serde_json::value::to_value(val).expect("serialization failed")
    }

    pub fn as_str(val: &Value) -> Option<&str> {
    	val.as_str()
    }

    pub use serde::{ Serialize, Deserialize, Serializer, Deserializer };
    pub use serde::error::Error as SerdeError;
    pub use serde_json::{Map, Value as JsonValue};
    pub type JsonObject = Map<String, JsonValue>;
}
